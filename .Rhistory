library(flexdashboard)
library(dplyr)
library(ggplot2)
library(plotly)
library(DT)
library(leaflet)
library(readr)
library(RColorBrewer)
library(stringr)
library(shiny)
ts_data <- df %>%
group_by(ano, mes) %>%
summarise(Total = sum(registros, na.rm = TRUE), .groups = 'drop')
unique(df$natureza)
unique(df$natureza)
print(colnames(dados_crimes))
ggplot(medidas_risp, aes(x = as.factor(risp), y = total_registros, fill = as.factor(risp))) +
geom_boxplot() +
labs(title = "Distribuição das Ocorrências de Crimes por Região (RISP)",
x = "Região (RISP)",
y = "Total de Registros de Crimes") +
theme_minimal()
dados_bh <- dados(municipio == "BELO HORIZONTE") %>%
group_by()
dados_risp <- dados %>%
mutate(risp = as.numeric(risp)) %>%
filter(!is.na(risp))
library(ggplot2)
library(readxl)
library(tidyverse)
library(dplyr)
library(rstatix)  # Para medidas de dispersão
library(bookdown)
library(kableExtra)
dados <- read.csv("crimeviolento.csv", stringsAsFactors = FALSE)
glimpse(dados)
options(OutDec = ",")  # Formatação decimal
kable(head(dados, 10)) %>%
kable_classic(full_width = FALSE, html_font = "Cambria")
tabela_crimes <- dados %>%
group_by(natureza) %>%
summarise(Quantidade_Total = sum(registros, na.rm = TRUE)) %>%
arrange(desc(Quantidade_Total))
kable(tabela_crimes, format = "pandoc",
col.names = c("Tipo de Crime", "Quantidade de Registros"),
caption = "Frequência de Ocorrências por Tipo de Crime") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
library(dplyr)
library(kableExtra)
medidas_dispersao <- dados %>%
group_by(natureza) %>%
summarise(
Total_Registros = sum(registros, na.rm = TRUE),
Numero_Ocorrencias = n(),
Media = round(mean(registros, na.rm = TRUE), 2),
Mediana = median(registros, na.rm = TRUE),
Variancia = round(var(registros, na.rm = TRUE), 5),
Desvio_Padrao = round(sd(registros, na.rm = TRUE), 2),
Coef_Variacao = round((Desvio_Padrao / Media) * 100, 2)
)
kable(medidas_dispersao, format = "pandoc",
col.names = c("Tipo de Crime", "Total de Registros", "Número de Ocorrências", "Média", "Mediana", "Variância", "Desvio Padrão", "Coeficiente de Variação (%)"),
caption = "Medidas Estatísticas dos Crimes por Tipo") %>%
kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
install.packages("shiny")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("DT")  # Para tabelas interativas
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install.packages("shiny")
View(dados)
library(shiny)
library(ggplot2)
library(dplyr)
library(DT)
library(leaflet)
library(readr)
library(RColorBrewer)
library(stringr)
rm(list = ls()) #limpar a memória do R
options(OutDec=",") #colocar vírgula
#O teste de qui-quadrado pode ser usado para verificar a aderência de um
#conjunto de dados a uma distribuição normal, dividindo os dados em classes
#(intervalos) e comparando as frequências observadas com as esperadas de uma
#distribuição normal teórica.
#Aqui está um código em R para realizar essa análise:
# Definir a semente para reprodutibilidade
set.seed(123)
# Gerar um conjunto de dados aleatório (distribuição normal)
dados <- rnorm(100, mean = 50, sd = 10)
# Definir os intervalos (bins) para a frequência observada
intervalos <- hist(dados, plot = FALSE)  # Obtém os intervalos sem plotar o histograma
observados <- intervalos$counts  # Frequências observadas
breaks <- intervalos$breaks  # Limites dos intervalos
# Calcular as frequências esperadas com base na distribuição normal teórica
esperados <- diff(pnorm(breaks, mean = mean(dados), sd = sd(dados))) * length(dados)
# Realizar o teste de qui-quadrado
resultado <- chisq.test(observados, p = esperados, rescale.p = TRUE)
# Exibir resultado
print(resultado)
#Conclusão
#Como o p-valor(p-value = 0,8533) é maior que 0,05 não rejeitamos a hipótese nula, indicando que os
#dados podem seguir uma distribuição normal.
################################################################################
#Agora considerando o banco de dados aplicado na sala de aula
#Pacotes
library(readxl)
library(ggplot2)
#Análise Sistemas de Informação x Eng. de Agrimensura
dados <- read_excel("dados20251SI.xlsx")
attach(dados)
#Variável Nota
p <- ggplot(dados, aes(x = Nota)) +
geom_histogram(binwidth = 3.5, fill = "blue", color = "black") +
stat_bin(binwidth = 3.5, geom = "label", size = 3, alpha = 0.5, aes(label = ..count.., y = ..count..), vjust = 0.5) +
scale_x_continuous(breaks = seq(-1.75, 99.75, by = 3.5), limits = c(-1.75, 99.75)) +
scale_y_continuous(expand = expansion(add = c(0,2))) +
labs(x = "Notas", y = "Frequência") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Obter os cálculos do histograma
dados_histograma <- ggplot_build(p)$data[[1]]
# Ver os cálculos
print(dados_histograma)
# Definir os intervalos (bins) para a frequência observada
observados <- dados_histograma$count  # Frequências observadas
breaks <- c(dados_histograma$xmin,99.75)  # Limites dos intervalos
# Calcular as frequências esperadas com base na distribuição normal teórica
esperados <- diff(pnorm(breaks, mean = mean(Nota,na.rm = T), sd = sd(Nota,na.rm = T))) * sum(dados_histograma$count)
# Realizar o teste de qui-quadrado
resultado <- chisq.test(observados, p = esperados, rescale.p = TRUE)
# Exibir resultado
print(resultado)
#Conclusão
#Como o p-valor(p-value < 2,2e-16) é menor que 0,05 rejeitamos a hipótese nula, portanto
#há indícios de que a distribuição não é normal.
#Variável Faltas
p <- ggplot(dados, aes(x = Faltas)) +
geom_histogram(binwidth = 3.5, fill = "blue", color = "black") +
stat_bin(binwidth = 3.5, geom = "label", size = 3, alpha = 0.5, aes(label = ..count.., y = ..count..), vjust = 0.5) +
scale_x_continuous(breaks = seq(-1.75, 68.25, by = 3.5), limits = c(-1.75, 68.25)) +
scale_y_continuous(expand = expansion(add = c(0,2))) +
labs(x = "Faltas", y = "Frequência") +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Obter os cálculos do histograma
dados_histograma <- ggplot_build(p)$data[[1]]
# Ver os cálculos
print(dados_histograma)
# Definir os intervalos (bins) para a frequência observada
observados <- dados_histograma$count  # Frequências observadas
breaks <- c(dados_histograma$xmin,68.25)  # Limites dos intervalos
# Calcular as frequências esperadas com base na distribuição normal teórica
esperados <- diff(pnorm(breaks, mean = mean(Faltas,na.rm = T), sd = sd(Faltas,na.rm = T))) * sum(dados_histograma$count)
# Realizar o teste de qui-quadrado
resultado <- chisq.test(observados, p = esperados, rescale.p = TRUE)
# Exibir resultado
print(resultado)
#Conclusão
#Como o p-valor(p-value < 2,2e-16) é menor que 0,05 rejeitamos a hipótese nula, portanto
#há indícios de que a distribuição não é normal.
#################################################################################
#Outro exemplo, agora verificando se um conjunto de dados segue uma distribuição binomial
#usando o teste de qui-quadrado
# Definir a semente para reprodutibilidade
set.seed(123)
# Parâmetros da distribuição binomial
n_tentativas <- 10   # Número de tentativas
prob_sucesso <- 0.5   # Probabilidade de sucesso
# Gerar dados de uma distribuição binomial (100 amostras)
dados <- rbinom(100, size = n_tentativas, prob = prob_sucesso)
# Criar tabela de frequências observadas
observados <- table(dados)
# Valores possíveis (0 a n_tentativas)
valores_possiveis <- 0:n_tentativas
# Calcular as frequências esperadas usando a distribuição binomial
esperados <- dbinom(valores_possiveis, size = n_tentativas, prob = prob_sucesso) * length(dados)
# Garantir que os vetores tenham o mesmo tamanho (caso algum valor não apareça nos dados observados)
observados_completo <- rep(0, length(valores_possiveis))
names(observados_completo) <- valores_possiveis
observados_completo[names(observados)] <- observados
observados_completo
# Realizar o teste qui-quadrado
resultado <- chisq.test(observados_completo, p = esperados, rescale.p = TRUE)
# Exibir resultado
print(resultado)
#Conclusão
#Como o p-valor(p-value = 0,4091) é maior que 0,05 não rejeitamos a
#hipótese de que os dados seguem a distribuição binomial esperada.
##############################################################
#Outro exemplo
# Carregar pacote para manipulação de combinações
library(gtools)
# Definir a semente para reprodutibilidade
set.seed(123)
# Parâmetros
n_tentativas <- 10   # Número de tentativas por grupo
prob_sucesso <- 0.20 # Probabilidade de sucesso
tamanho_amostra <- 300  # Total de observações (0s e 1s)
# Gerar amostra de valores 0 ou 1
dados <- rbinom(tamanho_amostra, size = 1, prob = prob_sucesso)
# Gerar combinações de 300 elementos tomados 10 a 10 (seleção aleatória)
n_combinacoes <- 5000  # Número de combinações a serem analisadas
combinacoes <- t(sapply(1:n_combinacoes, function(x) sample(dados, n_tentativas, replace = FALSE)))
# Contar sucessos em cada combinação
sucessos_por_combinacao <- rowSums(combinacoes)
# Criar tabela de frequências observadas
observados <- table(factor(sucessos_por_combinacao, levels = 0:n_tentativas))
# Calcular as frequências esperadas da distribuição binomial
esperados <- dbinom(0:n_tentativas, size = n_tentativas, prob = prob_sucesso) * n_combinacoes
# Realizar o teste qui-quadrado
resultado <- chisq.test(observados, p = esperados, rescale.p = TRUE)
# Exibir resultado
print(resultado)
#Conclusão
#Como o p-valor(p-value = 6,47e-06) é menor que 0,05 rejeitamos
#a hipótese nula, portanto há indícios de que os dados não seguem
#a binomial esperada.
##############################################################
#Agora considerando o banco de dados aplicado na sala de aula
#Variável Situação
# Definir a semente para reprodutibilidade
set.seed(123)
# Definir sucesso como Situação = Aprovado
dados <- ifelse(Situação == "Aprovado", 1, 0)
# Parâmetros
n_tentativas <- 10   # Número de tentativas por grupo
prob_sucesso <- mean(dados) # Probabilidade de sucesso
tamanho_amostra <- 315  # Total de observações (0s e 1s)
# Gerar combinações de 315 elementos tomados 10 a 10 (seleção aleatória)
n_combinacoes <- 5000  # Número de combinações a serem analisadas
combinacoes <- t(sapply(1:n_combinacoes, function(x) sample(dados, n_tentativas, replace = FALSE)))
# Contar sucessos em cada combinação
sucessos_por_combinacao <- rowSums(combinacoes)
# Criar tabela de frequências observadas
observados <- table(factor(sucessos_por_combinacao, levels = 0:n_tentativas))
# Calcular as frequências esperadas da distribuição binomial
esperados <- dbinom(0:n_tentativas, size = n_tentativas, prob = prob_sucesso) * n_combinacoes
# Realizar o teste qui-quadrado
resultado <- chisq.test(observados, p = esperados, rescale.p = TRUE)
# Exibir resultado
print(resultado)
#Conclusão
#Como o p-valor(p-value = 0.2) é maior que 0,05 não rejeitamos a
#hipótese de que os dados seguem a distribuição binomial esperada.
View(resultado)
dados <- rbinom(tamanho_amostra, size = 1, prob = prob_sucesso)
rm(list = ls())
